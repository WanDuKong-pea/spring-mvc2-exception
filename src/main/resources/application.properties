#API 예외 처리_서블릿 오류 처리 방식 사용을 위해 다시 킴
server.error.whitelabel.enabled=false

#스프링 부트가 제공하는 ErrorPage는 아래 과정을 기본으로 제공함
#1. WebServerCustomizer의 ErrorPage를 자동으로 등록
#2. 예외 처리용 컨트롤러 ErrorPageController를 만듬
#3. 컨트롤러가 반환하는 동적 리소스의 경우 뷰 템플릿(오류 페이지) 경로는 resources/templates/error/상태코드.html
    # 정적 리소스의 경우 정절 HTML(오류 페이지) 경로는 resources/static or public/error/상태코드.html
# 개발자는 경로에 맞게 오류 페이지 등록만 해주면 됨.
# 자바 Exception은 500.html으로 처리됨


#스프링 부트 제공 "ErrorPage"의 "BasicErrorController"가 오류 정보를 "model"에 포함할지 여부
#오류 관련 내부 정보들을 고객에게 노출하는 것이 좋지 않기 때문에 설정할 경우가 생김
# exception 포함 여부( true , false )
server.error.include-exception=true
#message 포함 여부(on_param, always, never)
server.error.include-message=on_param
#trace 포함 여부(on_param, always, never)
server.error.include-stacktrace=on_param
#errors 포함 여부(on_param, always, never)
server.error.include-binding-errors=on_param
#기본 값이 never
#실무에서는 이것들을 노출하면 안됨! 사용자에게는 이쁜 오류 화면과 고객이 이해할 수 있는
#간단한 오류 메시지를 보여주고 오류는 서버에 로그로 남겨서 로그로 확인해야 함.
